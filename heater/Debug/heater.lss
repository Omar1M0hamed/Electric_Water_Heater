
heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000e7c  00000f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000a2  008000a2  00000f52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ee2  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011dc  00000000  00000000  0000422a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016a4  00000000  00000000  00005406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000634  00000000  00000000  00006aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb6  00000000  00000000  000070e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c5  00000000  00000000  00007f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000925b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 03 	call	0x6e6	; 0x6e6 <main>
  8a:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
 *  Author: user
 */ 
#include "ADC.h"

void ADC_Init(void){
	SetBit(ADMUX_Reg,ADCMUX_REFS1_Bit);//Internal Vref
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 68       	ori	r24, 0x80	; 128
  96:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX_Reg,ADCMUX_REFS0_Bit);
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
	SetBit(ADCSRA_Reg,ADCSRA_ADPS0_Bit);//F_CPU/128
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	86 b9       	out	0x06, r24	; 6
	SetBit(ADCSRA_Reg,ADCSRA_ADPS1_Bit);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	86 b9       	out	0x06, r24	; 6
	SetBit(ADCSRA_Reg,ADCSRA_ADPS2_Bit);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	86 b9       	out	0x06, r24	; 6
	SetBit(ADCSRA_Reg,ADCSRA_ADEN_Bit);//Enable ADC
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	08 95       	ret

000000b8 <ADC_Read>:
}
int16 ADC_Read(ADC_ChannelType ChannelId){
	int16 temp = 0;
	ADMUX_Reg = (ADMUX_Reg & 0xE0) | (ChannelId & 0x1F);
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	8f 71       	andi	r24, 0x1F	; 31
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7
	SetBit(ADCSRA_Reg,ADCSRA_ADSC_Bit);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
	while(GetBit(ADCSRA_Reg,ADCSRA_ADIF_Bit) == 0);//wait finish conversion
  c8:	34 9b       	sbis	0x06, 4	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_Read+0x10>
	SetBit(ADCSRA_Reg,ADCSRA_ADIF_Bit);//clear the flag
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	86 b9       	out	0x06, r24	; 6
	temp = ADCL_Reg;
  d2:	24 b1       	in	r18, 0x04	; 4
	temp |= (ADCH_Reg << 8);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	98 2f       	mov	r25, r24
  da:	88 27       	eor	r24, r24
	return temp;
  dc:	82 2b       	or	r24, r18
  de:	08 95       	ret

000000e0 <Button_Init>:
 */ 
#include "Button.h"

void Button_Init(void)
{
	DIO_ConfigureChannel(Button_0, Input);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(Button_1, Input);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	8e e1       	ldi	r24, 0x1E	; 30
  ec:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(Button_2, Input);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	8a e1       	ldi	r24, 0x1A	; 26
  f4:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
  f8:	08 95       	ret

000000fa <Button_getState>:
}
uint8 Button_getState(DIO_ChannelType ButtonNo)
{
	uint8 buttonState = 0;
	buttonState = DIO_ReadChannel(ButtonNo);
  fa:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_ReadChannel>
	return buttonState;
  fe:	08 95       	ret

00000100 <Heater_SetMode>:
	Heater_SetMode(HEATER_UNDEFINED_MODE);
}

void Heater_SetMode(Heater_ModeType HeaterMode)
{
	switch(HeaterMode)
 100:	88 23       	and	r24, r24
 102:	31 f0       	breq	.+12     	; 0x110 <Heater_SetMode+0x10>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	39 f4       	brne	.+14     	; 0x116 <Heater_SetMode+0x16>
	{
		case (HEATER_ON_MODE):
		{
			Relay_switchON(HEATER_Channel);
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 9f 03 	call	0x73e	; 0x73e <Relay_switchON>
			break;
 10e:	08 95       	ret
		}
		case (HEATER_OFF_MODE):
		{
			Relay_switchOFF(HEATER_Channel);
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 a3 03 	call	0x746	; 0x746 <Relay_switchOFF>
 116:	08 95       	ret

00000118 <Heater_Init>:
 */ 
#include "Ceramic_Heater.h"

void Heater_Init(void)
{
	DIO_ConfigureChannel(HEATER_Channel, Output);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	Heater_SetMode(HEATER_UNDEFINED_MODE);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 80 00 	call	0x100	; 0x100 <Heater_SetMode>
 126:	08 95       	ret

00000128 <DIO_WriteChannel>:

#include "DIO.h"

void DIO_WriteChannel (DIO_ChannelType ChannelId, STD_LevelType Level)
{
	DIO_PortType Portx = ChannelId/8;
 128:	98 2f       	mov	r25, r24
 12a:	96 95       	lsr	r25
 12c:	96 95       	lsr	r25
 12e:	96 95       	lsr	r25
	DIO_ChannelType BitNo = ChannelId%8;
 130:	87 70       	andi	r24, 0x07	; 7
	
	switch (Portx)
 132:	91 30       	cpi	r25, 0x01	; 1
 134:	21 f1       	breq	.+72     	; 0x17e <DIO_WriteChannel+0x56>
 136:	30 f0       	brcs	.+12     	; 0x144 <DIO_WriteChannel+0x1c>
 138:	92 30       	cpi	r25, 0x02	; 2
 13a:	f1 f1       	breq	.+124    	; 0x1b8 <DIO_WriteChannel+0x90>
 13c:	93 30       	cpi	r25, 0x03	; 3
 13e:	09 f4       	brne	.+2      	; 0x142 <DIO_WriteChannel+0x1a>
 140:	58 c0       	rjmp	.+176    	; 0x1f2 <DIO_WriteChannel+0xca>
 142:	08 95       	ret
	{
		case DIO_PortA:
		if (Level == STD_High)
 144:	61 30       	cpi	r22, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <DIO_WriteChannel+0x3a>
		{
			SetBit(PORTA_R,BitNo);
 148:	4b b3       	in	r20, 0x1b	; 27
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WriteChannel+0x2e>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WriteChannel+0x2a>
 15a:	cb 01       	movw	r24, r22
 15c:	84 2b       	or	r24, r20
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	08 95       	ret
		}
		else{
			ClearBit(PORTA_R,BitNo);
 162:	4b b3       	in	r20, 0x1b	; 27
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_WriteChannel+0x48>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_WriteChannel+0x44>
 174:	cb 01       	movw	r24, r22
 176:	80 95       	com	r24
 178:	84 23       	and	r24, r20
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (Level == STD_High)
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	69 f4       	brne	.+26     	; 0x19c <DIO_WriteChannel+0x74>
		{
			SetBit(PORTB_R,BitNo);
 182:	48 b3       	in	r20, 0x18	; 24
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_WriteChannel+0x68>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_WriteChannel+0x64>
 194:	cb 01       	movw	r24, r22
 196:	84 2b       	or	r24, r20
 198:	88 bb       	out	0x18, r24	; 24
 19a:	08 95       	ret
		}
		else{
			ClearBit(PORTB_R,BitNo);
 19c:	48 b3       	in	r20, 0x18	; 24
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_WriteChannel+0x82>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	8a 95       	dec	r24
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_WriteChannel+0x7e>
 1ae:	cb 01       	movw	r24, r22
 1b0:	80 95       	com	r24
 1b2:	84 23       	and	r24, r20
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (Level == STD_High)
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <DIO_WriteChannel+0xae>
		{
			SetBit(PORTC_R,BitNo);
 1bc:	45 b3       	in	r20, 0x15	; 21
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	b9 01       	movw	r22, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_WriteChannel+0xa2>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_WriteChannel+0x9e>
 1ce:	cb 01       	movw	r24, r22
 1d0:	84 2b       	or	r24, r20
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	08 95       	ret
		}
		else{
			ClearBit(PORTC_R,BitNo);
 1d6:	45 b3       	in	r20, 0x15	; 21
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_WriteChannel+0xbc>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_WriteChannel+0xb8>
 1e8:	cb 01       	movw	r24, r22
 1ea:	80 95       	com	r24
 1ec:	84 23       	and	r24, r20
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (Level == STD_High)
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	69 f4       	brne	.+26     	; 0x210 <DIO_WriteChannel+0xe8>
		{
			SetBit(PORTD_R,BitNo);
 1f6:	42 b3       	in	r20, 0x12	; 18
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	b9 01       	movw	r22, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WriteChannel+0xdc>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	8a 95       	dec	r24
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WriteChannel+0xd8>
 208:	cb 01       	movw	r24, r22
 20a:	84 2b       	or	r24, r20
 20c:	82 bb       	out	0x12, r24	; 18
 20e:	08 95       	ret
		}
		else{
			ClearBit(PORTD_R,BitNo);
 210:	42 b3       	in	r20, 0x12	; 18
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	b9 01       	movw	r22, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_WriteChannel+0xf6>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	8a 95       	dec	r24
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_WriteChannel+0xf2>
 222:	cb 01       	movw	r24, r22
 224:	80 95       	com	r24
 226:	84 23       	and	r24, r20
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <DIO_ReadChannel>:
	
	
}
STD_LevelType DIO_ReadChannel (DIO_ChannelType ChannelId)
{
		DIO_PortType Portx = ChannelId/8;
 22c:	98 2f       	mov	r25, r24
 22e:	96 95       	lsr	r25
 230:	96 95       	lsr	r25
 232:	96 95       	lsr	r25
		DIO_ChannelType BitNo = ChannelId%8;
 234:	48 2f       	mov	r20, r24
 236:	47 70       	andi	r20, 0x07	; 7
		STD_LevelType BitValue = STD_Low;
		
		switch(Portx){
 238:	91 30       	cpi	r25, 0x01	; 1
 23a:	81 f0       	breq	.+32     	; 0x25c <DIO_ReadChannel+0x30>
 23c:	28 f0       	brcs	.+10     	; 0x248 <DIO_ReadChannel+0x1c>
 23e:	92 30       	cpi	r25, 0x02	; 2
 240:	b9 f0       	breq	.+46     	; 0x270 <DIO_ReadChannel+0x44>
 242:	93 30       	cpi	r25, 0x03	; 3
 244:	f9 f0       	breq	.+62     	; 0x284 <DIO_ReadChannel+0x58>
 246:	28 c0       	rjmp	.+80     	; 0x298 <DIO_ReadChannel+0x6c>
			case DIO_PortA:
			BitValue = GetBit(PINA_R,BitNo);
 248:	99 b3       	in	r25, 0x19	; 25
 24a:	89 2f       	mov	r24, r25
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_ReadChannel+0x28>
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	4a 95       	dec	r20
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_ReadChannel+0x24>
 258:	81 70       	andi	r24, 0x01	; 1
			break;
 25a:	08 95       	ret
			case DIO_PortB:
			BitValue = GetBit(PINB_R,BitNo);
 25c:	26 b3       	in	r18, 0x16	; 22
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	c9 01       	movw	r24, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_ReadChannel+0x3c>
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	4a 95       	dec	r20
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_ReadChannel+0x38>
 26c:	81 70       	andi	r24, 0x01	; 1
			break;
 26e:	08 95       	ret
			case DIO_PortC:
			BitValue = GetBit(PINC_R,BitNo);
 270:	23 b3       	in	r18, 0x13	; 19
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	c9 01       	movw	r24, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_ReadChannel+0x50>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	4a 95       	dec	r20
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_ReadChannel+0x4c>
 280:	81 70       	andi	r24, 0x01	; 1
			break;
 282:	08 95       	ret
			case DIO_PortD:
			BitValue = GetBit(PIND_R,BitNo);
 284:	20 b3       	in	r18, 0x10	; 16
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	c9 01       	movw	r24, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_ReadChannel+0x64>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	4a 95       	dec	r20
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_ReadChannel+0x60>
 294:	81 70       	andi	r24, 0x01	; 1
			break;
 296:	08 95       	ret
}
STD_LevelType DIO_ReadChannel (DIO_ChannelType ChannelId)
{
		DIO_PortType Portx = ChannelId/8;
		DIO_ChannelType BitNo = ChannelId%8;
		STD_LevelType BitValue = STD_Low;
 298:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		return BitValue;
	
	
}
 29a:	08 95       	ret

0000029c <DIO_ToggleChannel>:

void DIO_ToggleChannel (DIO_ChannelType ChannelId)
{
	DIO_PortType Portx = ChannelId/8;
 29c:	98 2f       	mov	r25, r24
 29e:	96 95       	lsr	r25
 2a0:	96 95       	lsr	r25
 2a2:	96 95       	lsr	r25
	DIO_ChannelType BitNo = ChannelId%8;
 2a4:	87 70       	andi	r24, 0x07	; 7
	
	switch (Portx)
 2a6:	91 30       	cpi	r25, 0x01	; 1
 2a8:	99 f0       	breq	.+38     	; 0x2d0 <DIO_ToggleChannel+0x34>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_ToggleChannel+0x1a>
 2ac:	92 30       	cpi	r25, 0x02	; 2
 2ae:	e9 f0       	breq	.+58     	; 0x2ea <DIO_ToggleChannel+0x4e>
 2b0:	93 30       	cpi	r25, 0x03	; 3
 2b2:	41 f1       	breq	.+80     	; 0x304 <DIO_ToggleChannel+0x68>
 2b4:	08 95       	ret
	{
		case DIO_PortA:
		ToggleBit(PORTA_R,BitNo);
 2b6:	4b b3       	in	r20, 0x1b	; 27
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_ToggleChannel+0x28>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_ToggleChannel+0x24>
 2c8:	cb 01       	movw	r24, r22
 2ca:	84 27       	eor	r24, r20
 2cc:	8b bb       	out	0x1b, r24	; 27
		break;
 2ce:	08 95       	ret
		
		case DIO_PortB:
		ToggleBit(PORTB_R,BitNo);
 2d0:	48 b3       	in	r20, 0x18	; 24
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	b9 01       	movw	r22, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_ToggleChannel+0x42>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	8a 95       	dec	r24
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_ToggleChannel+0x3e>
 2e2:	cb 01       	movw	r24, r22
 2e4:	84 27       	eor	r24, r20
 2e6:	88 bb       	out	0x18, r24	; 24
		break;
 2e8:	08 95       	ret
		
		case DIO_PortC:
		ToggleBit(PORTC_R,BitNo);
 2ea:	45 b3       	in	r20, 0x15	; 21
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	b9 01       	movw	r22, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_ToggleChannel+0x5c>
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	8a 95       	dec	r24
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_ToggleChannel+0x58>
 2fc:	cb 01       	movw	r24, r22
 2fe:	84 27       	eor	r24, r20
 300:	85 bb       	out	0x15, r24	; 21
		break;
 302:	08 95       	ret
		
		case DIO_PortD:
		ToggleBit(PORTD_R,BitNo);
 304:	42 b3       	in	r20, 0x12	; 18
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	b9 01       	movw	r22, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_ToggleChannel+0x76>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	8a 95       	dec	r24
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_ToggleChannel+0x72>
 316:	cb 01       	movw	r24, r22
 318:	84 27       	eor	r24, r20
 31a:	82 bb       	out	0x12, r24	; 18
 31c:	08 95       	ret

0000031e <DIO_ReadPort>:

uint8 DIO_ReadPort (DIO_PortType PortId)
{
	uint8 Data=0;
	
	switch(PortId)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	41 f0       	breq	.+16     	; 0x332 <DIO_ReadPort+0x14>
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_ReadPort+0x10>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	39 f0       	breq	.+14     	; 0x336 <DIO_ReadPort+0x18>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	39 f0       	breq	.+14     	; 0x33a <DIO_ReadPort+0x1c>
 32c:	08 c0       	rjmp	.+16     	; 0x33e <DIO_ReadPort+0x20>
	{
		case DIO_PortA:
		Data = PORTA_R;
 32e:	8b b3       	in	r24, 0x1b	; 27
		break;
 330:	08 95       	ret
		
		case DIO_PortB:
		Data = PORTB_R;
 332:	88 b3       	in	r24, 0x18	; 24
		break;
 334:	08 95       	ret
		
		case DIO_PortC:
		Data = PORTC_R;
 336:	85 b3       	in	r24, 0x15	; 21
		break;
 338:	08 95       	ret
		
		case DIO_PortD:
		Data = PORTD_R;
 33a:	82 b3       	in	r24, 0x12	; 18
		break;
 33c:	08 95       	ret
}


uint8 DIO_ReadPort (DIO_PortType PortId)
{
	uint8 Data=0;
 33e:	80 e0       	ldi	r24, 0x00	; 0
		Data = PORTD_R;
		break;
	}
	
	return Data;
}
 340:	08 95       	ret

00000342 <DIO_WritePort>:


void DIO_WritePort (DIO_PortType PortId, uint8 PortValue)
{
	
	switch(PortId)
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	41 f0       	breq	.+16     	; 0x356 <DIO_WritePort+0x14>
 346:	28 f0       	brcs	.+10     	; 0x352 <DIO_WritePort+0x10>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	39 f0       	breq	.+14     	; 0x35a <DIO_WritePort+0x18>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	39 f0       	breq	.+14     	; 0x35e <DIO_WritePort+0x1c>
 350:	08 95       	ret
	{
		case DIO_PortA:
		PORTA_R = PortValue;
 352:	6b bb       	out	0x1b, r22	; 27
		break;
 354:	08 95       	ret
		
		case DIO_PortB:
		PORTB_R = PortValue;
 356:	68 bb       	out	0x18, r22	; 24
		break;
 358:	08 95       	ret
		
		case DIO_PortC:
		PORTC_R = PortValue;
 35a:	65 bb       	out	0x15, r22	; 21
		break;
 35c:	08 95       	ret
		
		case DIO_PortD:
		PORTD_R = PortValue;
 35e:	62 bb       	out	0x12, r22	; 18
 360:	08 95       	ret

00000362 <DIO_ConfigureChannel>:



void DIO_ConfigureChannel (DIO_ChannelType ChannelId, DIO_DirType Direction)
{
	DIO_PortType Portx = ChannelId/8;
 362:	98 2f       	mov	r25, r24
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	96 95       	lsr	r25
	DIO_ChannelType BitNo = ChannelId%8;
 36a:	87 70       	andi	r24, 0x07	; 7
	
	switch (Portx)
 36c:	91 30       	cpi	r25, 0x01	; 1
 36e:	21 f1       	breq	.+72     	; 0x3b8 <DIO_ConfigureChannel+0x56>
 370:	30 f0       	brcs	.+12     	; 0x37e <DIO_ConfigureChannel+0x1c>
 372:	92 30       	cpi	r25, 0x02	; 2
 374:	f1 f1       	breq	.+124    	; 0x3f2 <DIO_ConfigureChannel+0x90>
 376:	93 30       	cpi	r25, 0x03	; 3
 378:	09 f4       	brne	.+2      	; 0x37c <DIO_ConfigureChannel+0x1a>
 37a:	58 c0       	rjmp	.+176    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 37c:	08 95       	ret
	{
		case DIO_PortA:
		if (Direction == Output)
 37e:	61 30       	cpi	r22, 0x01	; 1
 380:	69 f4       	brne	.+26     	; 0x39c <DIO_ConfigureChannel+0x3a>
		{
			SetBit(DDRA_R,BitNo);
 382:	4a b3       	in	r20, 0x1a	; 26
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_ConfigureChannel+0x2e>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_ConfigureChannel+0x2a>
 394:	cb 01       	movw	r24, r22
 396:	84 2b       	or	r24, r20
 398:	8a bb       	out	0x1a, r24	; 26
 39a:	08 95       	ret
		}
		else{
			ClearBit(DDRA_R,BitNo);
 39c:	4a b3       	in	r20, 0x1a	; 26
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_ConfigureChannel+0x48>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_ConfigureChannel+0x44>
 3ae:	cb 01       	movw	r24, r22
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	8a bb       	out	0x1a, r24	; 26
 3b6:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (Direction == Output)
 3b8:	61 30       	cpi	r22, 0x01	; 1
 3ba:	69 f4       	brne	.+26     	; 0x3d6 <DIO_ConfigureChannel+0x74>
		{
			SetBit(DDRB_R,BitNo);
 3bc:	47 b3       	in	r20, 0x17	; 23
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	b9 01       	movw	r22, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_ConfigureChannel+0x68>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_ConfigureChannel+0x64>
 3ce:	cb 01       	movw	r24, r22
 3d0:	84 2b       	or	r24, r20
 3d2:	87 bb       	out	0x17, r24	; 23
 3d4:	08 95       	ret
		}
		else{
			ClearBit(DDRB_R,BitNo);
 3d6:	47 b3       	in	r20, 0x17	; 23
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	b9 01       	movw	r22, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_ConfigureChannel+0x82>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	8a 95       	dec	r24
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_ConfigureChannel+0x7e>
 3e8:	cb 01       	movw	r24, r22
 3ea:	80 95       	com	r24
 3ec:	84 23       	and	r24, r20
 3ee:	87 bb       	out	0x17, r24	; 23
 3f0:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (Direction == Output)
 3f2:	61 30       	cpi	r22, 0x01	; 1
 3f4:	69 f4       	brne	.+26     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		{
			SetBit(DDRC_R,BitNo);
 3f6:	44 b3       	in	r20, 0x14	; 20
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	84 2b       	or	r24, r20
 40c:	84 bb       	out	0x14, r24	; 20
 40e:	08 95       	ret
		}
		else{
			ClearBit(DDRC_R,BitNo);
 410:	44 b3       	in	r20, 0x14	; 20
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	b9 01       	movw	r22, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	cb 01       	movw	r24, r22
 424:	80 95       	com	r24
 426:	84 23       	and	r24, r20
 428:	84 bb       	out	0x14, r24	; 20
 42a:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (Direction == Output)
 42c:	61 30       	cpi	r22, 0x01	; 1
 42e:	69 f4       	brne	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			SetBit(DDRD_R,BitNo);
 430:	41 b3       	in	r20, 0x11	; 17
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	cb 01       	movw	r24, r22
 444:	84 2b       	or	r24, r20
 446:	81 bb       	out	0x11, r24	; 17
 448:	08 95       	ret
		}
		else{
			ClearBit(DDRD_R,BitNo);
 44a:	41 b3       	in	r20, 0x11	; 17
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	8a 95       	dec	r24
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45c:	cb 01       	movw	r24, r22
 45e:	80 95       	com	r24
 460:	84 23       	and	r24, r20
 462:	81 bb       	out	0x11, r24	; 17
 464:	08 95       	ret

00000466 <DIO_Init>:
	
	DIO_ChannelType count = DIO_ChannelA0;
	DIO_PortType Portx;
	DIO_ChannelType BitNo;
	
	for(count = DIO_ChannelA0 ; count<PINCOUNT ; count++)
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	a0 c0       	rjmp	.+320    	; 0x5aa <DIO_Init+0x144>
	{
		Portx = count/8;
 46a:	98 2f       	mov	r25, r24
 46c:	96 95       	lsr	r25
 46e:	96 95       	lsr	r25
 470:	96 95       	lsr	r25
		BitNo = count%8;
 472:	28 2f       	mov	r18, r24
 474:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 476:	91 30       	cpi	r25, 0x01	; 1
 478:	61 f1       	breq	.+88     	; 0x4d2 <DIO_Init+0x6c>
 47a:	38 f0       	brcs	.+14     	; 0x48a <DIO_Init+0x24>
 47c:	92 30       	cpi	r25, 0x02	; 2
 47e:	09 f4       	brne	.+2      	; 0x482 <DIO_Init+0x1c>
 480:	4c c0       	rjmp	.+152    	; 0x51a <DIO_Init+0xb4>
 482:	93 30       	cpi	r25, 0x03	; 3
 484:	09 f4       	brne	.+2      	; 0x488 <DIO_Init+0x22>
 486:	6d c0       	rjmp	.+218    	; 0x562 <DIO_Init+0xfc>
 488:	8f c0       	rjmp	.+286    	; 0x5a8 <DIO_Init+0x142>
			case DIO_PortA:
			if (PinCfg[count].PinDir == Output)
 48a:	e8 2f       	mov	r30, r24
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e0 5a       	subi	r30, 0xA0	; 160
 494:	ff 4f       	sbci	r31, 0xFF	; 255
 496:	90 81       	ld	r25, Z
 498:	91 30       	cpi	r25, 0x01	; 1
 49a:	69 f4       	brne	.+26     	; 0x4b6 <DIO_Init+0x50>
			{
				SetBit(DDRA_R,BitNo);
 49c:	9a b3       	in	r25, 0x1a	; 26
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	ba 01       	movw	r22, r20
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_Init+0x44>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_Init+0x40>
 4ae:	9b 01       	movw	r18, r22
 4b0:	29 2b       	or	r18, r25
 4b2:	2a bb       	out	0x1a, r18	; 26
 4b4:	79 c0       	rjmp	.+242    	; 0x5a8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRA_R,BitNo);
 4b6:	9a b3       	in	r25, 0x1a	; 26
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	ba 01       	movw	r22, r20
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_Init+0x5e>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	2a 95       	dec	r18
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_Init+0x5a>
 4c8:	9b 01       	movw	r18, r22
 4ca:	20 95       	com	r18
 4cc:	29 23       	and	r18, r25
 4ce:	2a bb       	out	0x1a, r18	; 26
 4d0:	6b c0       	rjmp	.+214    	; 0x5a8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortB:
			if (PinCfg[count].PinDir == Output)
 4d2:	e8 2f       	mov	r30, r24
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	e0 5a       	subi	r30, 0xA0	; 160
 4dc:	ff 4f       	sbci	r31, 0xFF	; 255
 4de:	90 81       	ld	r25, Z
 4e0:	91 30       	cpi	r25, 0x01	; 1
 4e2:	69 f4       	brne	.+26     	; 0x4fe <DIO_Init+0x98>
			{
				SetBit(DDRB_R,BitNo);
 4e4:	97 b3       	in	r25, 0x17	; 23
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	ba 01       	movw	r22, r20
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_Init+0x8c>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	2a 95       	dec	r18
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_Init+0x88>
 4f6:	9b 01       	movw	r18, r22
 4f8:	29 2b       	or	r18, r25
 4fa:	27 bb       	out	0x17, r18	; 23
 4fc:	55 c0       	rjmp	.+170    	; 0x5a8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRB_R,BitNo);
 4fe:	97 b3       	in	r25, 0x17	; 23
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	ba 01       	movw	r22, r20
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_Init+0xa6>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	2a 95       	dec	r18
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_Init+0xa2>
 510:	9b 01       	movw	r18, r22
 512:	20 95       	com	r18
 514:	29 23       	and	r18, r25
 516:	27 bb       	out	0x17, r18	; 23
 518:	47 c0       	rjmp	.+142    	; 0x5a8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortC:
			if (PinCfg[count].PinDir == Output)
 51a:	e8 2f       	mov	r30, r24
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	e0 5a       	subi	r30, 0xA0	; 160
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	90 81       	ld	r25, Z
 528:	91 30       	cpi	r25, 0x01	; 1
 52a:	69 f4       	brne	.+26     	; 0x546 <DIO_Init+0xe0>
			{
				SetBit(DDRC_R,BitNo);
 52c:	94 b3       	in	r25, 0x14	; 20
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	ba 01       	movw	r22, r20
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_Init+0xd4>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	2a 95       	dec	r18
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_Init+0xd0>
 53e:	9b 01       	movw	r18, r22
 540:	29 2b       	or	r18, r25
 542:	24 bb       	out	0x14, r18	; 20
 544:	31 c0       	rjmp	.+98     	; 0x5a8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRC_R,BitNo);
 546:	94 b3       	in	r25, 0x14	; 20
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	ba 01       	movw	r22, r20
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_Init+0xee>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	2a 95       	dec	r18
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_Init+0xea>
 558:	9b 01       	movw	r18, r22
 55a:	20 95       	com	r18
 55c:	29 23       	and	r18, r25
 55e:	24 bb       	out	0x14, r18	; 20
 560:	23 c0       	rjmp	.+70     	; 0x5a8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortD:
			if (PinCfg[count].PinDir == Output)
 562:	e8 2f       	mov	r30, r24
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	e0 5a       	subi	r30, 0xA0	; 160
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	90 81       	ld	r25, Z
 570:	91 30       	cpi	r25, 0x01	; 1
 572:	69 f4       	brne	.+26     	; 0x58e <DIO_Init+0x128>
			{
				SetBit(DDRD_R,BitNo);
 574:	91 b3       	in	r25, 0x11	; 17
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	ba 01       	movw	r22, r20
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_Init+0x11c>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	2a 95       	dec	r18
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_Init+0x118>
 586:	9b 01       	movw	r18, r22
 588:	29 2b       	or	r18, r25
 58a:	21 bb       	out	0x11, r18	; 17
 58c:	0d c0       	rjmp	.+26     	; 0x5a8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRD_R,BitNo);
 58e:	91 b3       	in	r25, 0x11	; 17
 590:	41 e0       	ldi	r20, 0x01	; 1
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	ba 01       	movw	r22, r20
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_Init+0x136>
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	2a 95       	dec	r18
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_Init+0x132>
 5a0:	9b 01       	movw	r18, r22
 5a2:	20 95       	com	r18
 5a4:	29 23       	and	r18, r25
 5a6:	21 bb       	out	0x11, r18	; 17
	
	DIO_ChannelType count = DIO_ChannelA0;
	DIO_PortType Portx;
	DIO_ChannelType BitNo;
	
	for(count = DIO_ChannelA0 ; count<PINCOUNT ; count++)
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 32       	cpi	r24, 0x20	; 32
 5ac:	08 f4       	brcc	.+2      	; 0x5b0 <DIO_Init+0x14a>
 5ae:	5d cf       	rjmp	.-326    	; 0x46a <DIO_Init+0x4>
		}
		
	}
	
	
 5b0:	08 95       	ret

000005b2 <EEPROM_write>:


void EEPROM_write(uint16 uiAddress, uint8 ucData)
{
	/* Wait for completion of previous write */
	while(EECR_R & (1<<EEWE_Bit))
 5b2:	e1 99       	sbic	0x1c, 1	; 28
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <EEPROM_write>
	;
	/* Set up address and data registers */
	EEARL_R = uiAddress;
 5b6:	8f bb       	out	0x1f, r24	; 31
	EEARH_R = uiAddress>>8;
 5b8:	9e bb       	out	0x1e, r25	; 30
	EEDR_R = ucData;
 5ba:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR_R |= (1<<EEMWE_Bit);
 5bc:	8c b3       	in	r24, 0x1c	; 28
 5be:	84 60       	ori	r24, 0x04	; 4
 5c0:	8c bb       	out	0x1c, r24	; 28
	/* Start eeprom write by setting EEWE */
	EECR_R |= (1<<EEWE_Bit);
 5c2:	8c b3       	in	r24, 0x1c	; 28
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	8c bb       	out	0x1c, r24	; 28
 5c8:	08 95       	ret

000005ca <EEPROM_read>:


uint8 EEPROM_read(uint16 uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR_R & (1<<EEWE_Bit))
 5ca:	e1 99       	sbic	0x1c, 1	; 28
 5cc:	fe cf       	rjmp	.-4      	; 0x5ca <EEPROM_read>
	;
	/* Set up address register */
	EEARL_R = uiAddress;
 5ce:	8f bb       	out	0x1f, r24	; 31
	EEARH_R = uiAddress>>8;
 5d0:	9e bb       	out	0x1e, r25	; 30
	/* Start eeprom read by writing EERE */
	EECR_R |= (1<<EERE_Bit);
 5d2:	8c b3       	in	r24, 0x1c	; 28
 5d4:	81 60       	ori	r24, 0x01	; 1
 5d6:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR_R;
 5d8:	8d b3       	in	r24, 0x1d	; 29
}
 5da:	08 95       	ret

000005dc <Ext_INT_Enable>:
			case Ext_INT1:
			ClearBit(GICR_R, GICR_INT1_Bit);
			break;
			
			case Ext_INT2:
			ClearBit(GICR_R, GICR_INT2_Bit);
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	41 f0       	breq	.+16     	; 0x5f0 <Ext_INT_Enable+0x14>
 5e0:	18 f0       	brcs	.+6      	; 0x5e8 <Ext_INT_Enable+0xc>
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	49 f0       	breq	.+18     	; 0x5f8 <Ext_INT_Enable+0x1c>
 5e6:	08 95       	ret
 5e8:	8b b7       	in	r24, 0x3b	; 59
 5ea:	80 64       	ori	r24, 0x40	; 64
 5ec:	8b bf       	out	0x3b, r24	; 59
 5ee:	08 95       	ret
 5f0:	8b b7       	in	r24, 0x3b	; 59
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	8b bf       	out	0x3b, r24	; 59
 5f6:	08 95       	ret
 5f8:	8b b7       	in	r24, 0x3b	; 59
 5fa:	8b bf       	out	0x3b, r24	; 59
 5fc:	08 95       	ret

000005fe <Ext_INT_SnControl>:
			break;
		}
}
void Ext_INT_SnControl(ExtINT_Type INTId, ExtISC_Type mode)
{
		switch(INTId)
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	41 f0       	breq	.+16     	; 0x612 <Ext_INT_SnControl+0x14>
 602:	18 f0       	brcs	.+6      	; 0x60a <Ext_INT_SnControl+0xc>
 604:	82 30       	cpi	r24, 0x02	; 2
 606:	71 f0       	breq	.+28     	; 0x624 <Ext_INT_SnControl+0x26>
 608:	08 95       	ret
		{
			case Ext_INT0:
			MCUCR_R |= (mode<<0);
 60a:	85 b7       	in	r24, 0x35	; 53
 60c:	68 2b       	or	r22, r24
 60e:	65 bf       	out	0x35, r22	; 53
			break;
 610:	08 95       	ret
			
			case Ext_INT1:
			MCUCR_R |= (mode<<2);
 612:	85 b7       	in	r24, 0x35	; 53
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	68 2b       	or	r22, r24
 620:	65 bf       	out	0x35, r22	; 53
			break;
 622:	08 95       	ret
			
			case Ext_INT2:
			if (mode == Falling_Edge)
 624:	63 30       	cpi	r22, 0x03	; 3
 626:	21 f4       	brne	.+8      	; 0x630 <Ext_INT_SnControl+0x32>
			{
				ClearBit(MCUCSR_R, MCUCSR_INT2_ISC2_Bit);
 628:	84 b7       	in	r24, 0x34	; 52
 62a:	8f 7b       	andi	r24, 0xBF	; 191
 62c:	84 bf       	out	0x34, r24	; 52
 62e:	08 95       	ret
			}
			else if(mode == Rising_Edge)
 630:	62 30       	cpi	r22, 0x02	; 2
 632:	19 f4       	brne	.+6      	; 0x63a <Ext_INT_SnControl+0x3c>
			{
				SetBit(MCUCSR_R, MCUCSR_INT2_ISC2_Bit);
 634:	84 b7       	in	r24, 0x34	; 52
 636:	80 64       	ori	r24, 0x40	; 64
 638:	84 bf       	out	0x34, r24	; 52
 63a:	08 95       	ret

0000063c <Ext_INT_SetCallBack>:
	
}

void Ext_INT_SetCallBack ( void(*Ptr2Func)(void) )
{
	ExtINT_CallBack_Ptr = Ptr2Func;
 63c:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x1>
 640:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
 644:	08 95       	ret

00000646 <__vector_1>:
}



void __vector_1(void)
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
	(*ExtINT_CallBack_Ptr)();
 668:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <__data_end>
 66c:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <__data_end+0x1>
 670:	09 95       	icall

 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <GINT_Enable_AllInterrupts>:
 */ 

#include "GINT.h"

void GINT_Enable_AllInterrupts(){
	SetBit(SREG_R, GINT_I_Bit);
 694:	8f b7       	in	r24, 0x3f	; 63
 696:	80 68       	ori	r24, 0x80	; 128
 698:	8f bf       	out	0x3f, r24	; 63
 69a:	08 95       	ret

0000069c <LED_Init>:

#include "LED.h"

void LED_Init(void)
{
	DIO_ConfigureChannel(LED_0, Output);
 69c:	61 e0       	ldi	r22, 0x01	; 1
 69e:	82 e1       	ldi	r24, 0x12	; 18
 6a0:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(LED_1, Output);
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	87 e1       	ldi	r24, 0x17	; 23
 6a8:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(LED_2, Output);
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	8b e1       	ldi	r24, 0x1B	; 27
 6b0:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
 6b4:	08 95       	ret

000006b6 <SetLED_ON>:
}

void SetLED_ON (DIO_ChannelType ChannelId)
{
	DIO_WriteChannel(ChannelId, STD_High);
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
 6bc:	08 95       	ret

000006be <SetLED_OFF>:
}

void SetLED_OFF (DIO_ChannelType ChannelId)
{
	DIO_WriteChannel(ChannelId, STD_Low);
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
 6c4:	08 95       	ret

000006c6 <Flip_LED>:
}

void Flip_LED (DIO_ChannelType ChannelId)
{
	DIO_ToggleChannel(ChannelId);
 6c6:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_ToggleChannel>
 6ca:	08 95       	ret

000006cc <LM35_Init>:
 *  Author: user
 */ 
#include "LM35.h"

void LM35_Init(void){
	ADC_Init();
 6cc:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 6d0:	08 95       	ret

000006d2 <LM35_Read>:
}

int16 LM35_Read(ADC_ChannelType ChannelId){
	int16 temp = 0;
	temp = (ADC_Read(ChannelId))/4;
 6d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_Read>
 6d6:	99 23       	and	r25, r25
 6d8:	0c f4       	brge	.+2      	; 0x6dc <LM35_Read+0xa>
 6da:	03 96       	adiw	r24, 0x03	; 3
	return temp;
 6dc:	95 95       	asr	r25
 6de:	87 95       	ror	r24
 6e0:	95 95       	asr	r25
 6e2:	87 95       	ror	r24
 6e4:	08 95       	ret

000006e6 <main>:
#include "WaterHeater_Control.h"


int main(void)
{
	WaterHeater_Control_Init();
 6e6:	0e 94 23 06 	call	0xc46	; 0xc46 <WaterHeater_Control_Init>
	SM_Init();
 6ea:	0e 94 0d 04 	call	0x81a	; 0x81a <SM_Init>
	
    while (1) 
    {
		SM();
 6ee:	0e 94 1b 04 	call	0x836	; 0x836 <SM>
 6f2:	fd cf       	rjmp	.-6      	; 0x6ee <main+0x8>

000006f4 <Peltier_SetMode>:
	Peltier_SetMode(PELTIER_UNDEFINED_MODE);
}

void Peltier_SetMode(Peltier_ModeType PeltierMode)
{
	switch(PeltierMode)
 6f4:	88 23       	and	r24, r24
 6f6:	31 f0       	breq	.+12     	; 0x704 <Peltier_SetMode+0x10>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	39 f4       	brne	.+14     	; 0x70a <Peltier_SetMode+0x16>
	{
		case (PELTIER_ON_MODE):
		{
			Relay_switchON(PELTIER_Channel);
 6fc:	83 e1       	ldi	r24, 0x13	; 19
 6fe:	0e 94 9f 03 	call	0x73e	; 0x73e <Relay_switchON>
			break;
 702:	08 95       	ret
		}
		case (PELTIER_OFF_MODE):
		{
			Relay_switchOFF(PELTIER_Channel);
 704:	83 e1       	ldi	r24, 0x13	; 19
 706:	0e 94 a3 03 	call	0x746	; 0x746 <Relay_switchOFF>
 70a:	08 95       	ret

0000070c <Peltier_Init>:
#include "Peltier.h"


void Peltier_Init(void)
{
	DIO_ConfigureChannel(PELTIER_Channel, Output);
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	83 e1       	ldi	r24, 0x13	; 19
 710:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	Peltier_SetMode(PELTIER_UNDEFINED_MODE);
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Peltier_SetMode>
 71a:	08 95       	ret

0000071c <Relay_Init>:
 */ 
#include "Relay.h"

void Relay_Init(void)
{
	DIO_ConfigureChannel(RELAY_1, Output);
 71c:	61 e0       	ldi	r22, 0x01	; 1
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(RELAY_2, Output);
 724:	61 e0       	ldi	r22, 0x01	; 1
 726:	83 e1       	ldi	r24, 0x13	; 19
 728:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_WriteChannel(RELAY_1, STD_Low);
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
	DIO_WriteChannel(RELAY_2, STD_Low);
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	83 e1       	ldi	r24, 0x13	; 19
 738:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
 73c:	08 95       	ret

0000073e <Relay_switchON>:
}
void Relay_switchON(DIO_ChannelType RelayNo)
{
	DIO_WriteChannel(RelayNo, STD_High);
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
 744:	08 95       	ret

00000746 <Relay_switchOFF>:
}
void Relay_switchOFF(DIO_ChannelType RelayNo)
{
	DIO_WriteChannel(RelayNo, STD_Low);
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
 74c:	08 95       	ret

0000074e <SSD_Init>:
	for(count = DIO_ChannelB4 ; count<=(DIO_ChannelB7 - DIO_ChannelB4) ; count++)
	{
		DIO_ConfigureChannel(count, Output);
	}
	
	DIO_ConfigureChannel(SSD_FirstDigit_En, Output);
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	8a e0       	ldi	r24, 0x0A	; 10
 752:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
	DIO_ConfigureChannel(SSD_SecondDigit_En, Output);
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	89 e0       	ldi	r24, 0x09	; 9
 75a:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_ConfigureChannel>
 75e:	08 95       	ret

00000760 <SSD_WriteNum>:
	
}


void SSD_WriteNum(uint8 FirstDigit,uint8 SecondDigit){
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	18 2f       	mov	r17, r24
 768:	d6 2f       	mov	r29, r22
	uint8 PortValue = 0;
	for (uint8 w=0;w<200;w++)
 76a:	c0 e0       	ldi	r28, 0x00	; 0
 76c:	37 c0       	rjmp	.+110    	; 0x7dc <SSD_WriteNum+0x7c>
	{
		PortValue = DIO_ReadPort(SSD_FirstDigit_DataPort);
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_ReadPort>
		PortValue = (PortValue & 0x0F) | (FirstDigit<<4);
 774:	90 e1       	ldi	r25, 0x10	; 16
 776:	19 9f       	mul	r17, r25
 778:	90 01       	movw	r18, r0
 77a:	11 24       	eor	r1, r1
 77c:	8f 70       	andi	r24, 0x0F	; 15
 77e:	68 2f       	mov	r22, r24
 780:	62 2b       	or	r22, r18
		DIO_WritePort(SSD_FirstDigit_DataPort,PortValue);
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_WritePort>
		DIO_WriteChannel(SSD_FirstDigit_En,STD_Low);
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	8a e0       	ldi	r24, 0x0A	; 10
 78c:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 790:	8f e8       	ldi	r24, 0x8F	; 143
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <SSD_WriteNum+0x34>
 798:	00 c0       	rjmp	.+0      	; 0x79a <SSD_WriteNum+0x3a>
 79a:	00 00       	nop
		_delay_us(100);
		DIO_WriteChannel(SSD_FirstDigit_En,STD_High);
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	8a e0       	ldi	r24, 0x0A	; 10
 7a0:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
		
		PortValue = DIO_ReadPort(SSD_SecondDigit_DataPort);
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_ReadPort>
		PortValue = (PortValue & 0x0F) | (SecondDigit<<4);
 7aa:	90 e1       	ldi	r25, 0x10	; 16
 7ac:	d9 9f       	mul	r29, r25
 7ae:	90 01       	movw	r18, r0
 7b0:	11 24       	eor	r1, r1
 7b2:	8f 70       	andi	r24, 0x0F	; 15
 7b4:	68 2f       	mov	r22, r24
 7b6:	62 2b       	or	r22, r18
		DIO_WritePort(SSD_SecondDigit_DataPort,PortValue);
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_WritePort>
		DIO_WriteChannel(SSD_SecondDigit_En,STD_Low);
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	89 e0       	ldi	r24, 0x09	; 9
 7c2:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
 7c6:	8f e8       	ldi	r24, 0x8F	; 143
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <SSD_WriteNum+0x6a>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <SSD_WriteNum+0x70>
 7d0:	00 00       	nop
		_delay_us(100);
		DIO_WriteChannel(SSD_SecondDigit_En,STD_High);
 7d2:	61 e0       	ldi	r22, 0x01	; 1
 7d4:	89 e0       	ldi	r24, 0x09	; 9
 7d6:	0e 94 94 00 	call	0x128	; 0x128 <DIO_WriteChannel>
}


void SSD_WriteNum(uint8 FirstDigit,uint8 SecondDigit){
	uint8 PortValue = 0;
	for (uint8 w=0;w<200;w++)
 7da:	cf 5f       	subi	r28, 0xFF	; 255
 7dc:	c8 3c       	cpi	r28, 0xC8	; 200
 7de:	38 f2       	brcs	.-114    	; 0x76e <SSD_WriteNum+0xe>
		DIO_WritePort(SSD_SecondDigit_DataPort,PortValue);
		DIO_WriteChannel(SSD_SecondDigit_En,STD_Low);
		_delay_us(100);
		DIO_WriteChannel(SSD_SecondDigit_En,STD_High);
	}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	08 95       	ret

000007e8 <Change_WaterHeater_State>:


void Change_WaterHeater_State (void)
{	
	
	if( ButtonState_Flag == TRUE )
 7e8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <ButtonState_Flag>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	39 f4       	brne	.+14     	; 0x7fe <Change_WaterHeater_State+0x16>
	{
		state = ON_State;
 7f0:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <state>
		ButtonState_Flag = FALSE;
 7f4:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <ButtonState_Flag>
		Timer0_Start(No_Prescaler);
 7f8:	0e 94 29 04 	call	0x852	; 0x852 <Timer0_Start>
 7fc:	08 95       	ret
	}
	else if( ButtonState_Flag == FALSE )
 7fe:	81 11       	cpse	r24, r1
 800:	0b c0       	rjmp	.+22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	{
		state = OFF_State;
 802:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <state>
		ButtonState_Flag = TRUE;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <ButtonState_Flag>
		SSD_WriteNum(0,0);
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 b0 03 	call	0x760	; 0x760 <SSD_WriteNum>
		Stop_WaterHeater_Operation();
 814:	0e 94 23 07 	call	0xe46	; 0xe46 <Stop_WaterHeater_Operation>
 818:	08 95       	ret

0000081a <SM_Init>:
static uint8 state;
static boolean ButtonState_Flag = FALSE;

void SM_Init(void)
{
	state = OFF_State;
 81a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <state>
	
	Ext_INT_SetCallBack(Change_WaterHeater_State);
 81e:	84 ef       	ldi	r24, 0xF4	; 244
 820:	93 e0       	ldi	r25, 0x03	; 3
 822:	0e 94 1e 03 	call	0x63c	; 0x63c <Ext_INT_SetCallBack>
	Ext_INT_SnControl(Ext_INT0,Rising_Edge);
 826:	62 e0       	ldi	r22, 0x02	; 2
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Ext_INT_SnControl>
	Ext_INT_Enable(Ext_INT0);	//Enable INT0
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Ext_INT_Enable>
 834:	08 95       	ret

00000836 <SM>:
}


void SM(void)
{
	switch(state)
 836:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <state>
 83a:	88 23       	and	r24, r24
 83c:	19 f0       	breq	.+6      	; 0x844 <SM+0xe>
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	29 f0       	breq	.+10     	; 0x84c <SM+0x16>
 842:	08 95       	ret
	{
		case (OFF_State):
		{
				//All displays are off
				//SSD_WriteNum(0,0);
				SetLED_OFF(Heater_LED);
 844:	87 e1       	ldi	r24, 0x17	; 23
 846:	0e 94 5f 03 	call	0x6be	; 0x6be <SetLED_OFF>

			break;
 84a:	08 95       	ret
		}
		
		case (ON_State):
		{
				WaterHeater_Control();
 84c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <WaterHeater_Control>
 850:	08 95       	ret

00000852 <Timer0_Start>:
}

void Timer2_DisableInterrupt(void)
{
	#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
		ClearBit(TIMER_TIMSK_R, TIMSK_TOIE2_Bit);
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	51 f4       	brne	.+20     	; 0x86a <__stack+0xb>
 856:	83 b7       	in	r24, 0x33	; 51
 858:	81 60       	ori	r24, 0x01	; 1
 85a:	83 bf       	out	0x33, r24	; 51
 85c:	83 b7       	in	r24, 0x33	; 51
 85e:	8d 7f       	andi	r24, 0xFD	; 253
 860:	83 bf       	out	0x33, r24	; 51
 862:	83 b7       	in	r24, 0x33	; 51
 864:	8b 7f       	andi	r24, 0xFB	; 251
 866:	83 bf       	out	0x33, r24	; 51
 868:	08 95       	ret
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	51 f4       	brne	.+20     	; 0x882 <__stack+0x23>
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	8e 7f       	andi	r24, 0xFE	; 254
 872:	83 bf       	out	0x33, r24	; 51
 874:	83 b7       	in	r24, 0x33	; 51
 876:	82 60       	ori	r24, 0x02	; 2
 878:	83 bf       	out	0x33, r24	; 51
 87a:	83 b7       	in	r24, 0x33	; 51
 87c:	8b 7f       	andi	r24, 0xFB	; 251
 87e:	83 bf       	out	0x33, r24	; 51
 880:	08 95       	ret
 882:	83 30       	cpi	r24, 0x03	; 3
 884:	51 f4       	brne	.+20     	; 0x89a <__stack+0x3b>
 886:	83 b7       	in	r24, 0x33	; 51
 888:	81 60       	ori	r24, 0x01	; 1
 88a:	83 bf       	out	0x33, r24	; 51
 88c:	83 b7       	in	r24, 0x33	; 51
 88e:	82 60       	ori	r24, 0x02	; 2
 890:	83 bf       	out	0x33, r24	; 51
 892:	83 b7       	in	r24, 0x33	; 51
 894:	8b 7f       	andi	r24, 0xFB	; 251
 896:	83 bf       	out	0x33, r24	; 51
 898:	08 95       	ret
 89a:	84 30       	cpi	r24, 0x04	; 4
 89c:	51 f4       	brne	.+20     	; 0x8b2 <__stack+0x53>
 89e:	83 b7       	in	r24, 0x33	; 51
 8a0:	8e 7f       	andi	r24, 0xFE	; 254
 8a2:	83 bf       	out	0x33, r24	; 51
 8a4:	83 b7       	in	r24, 0x33	; 51
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	83 bf       	out	0x33, r24	; 51
 8aa:	83 b7       	in	r24, 0x33	; 51
 8ac:	84 60       	ori	r24, 0x04	; 4
 8ae:	83 bf       	out	0x33, r24	; 51
 8b0:	08 95       	ret
 8b2:	85 30       	cpi	r24, 0x05	; 5
 8b4:	51 f4       	brne	.+20     	; 0x8ca <__stack+0x6b>
 8b6:	83 b7       	in	r24, 0x33	; 51
 8b8:	81 60       	ori	r24, 0x01	; 1
 8ba:	83 bf       	out	0x33, r24	; 51
 8bc:	83 b7       	in	r24, 0x33	; 51
 8be:	8d 7f       	andi	r24, 0xFD	; 253
 8c0:	83 bf       	out	0x33, r24	; 51
 8c2:	83 b7       	in	r24, 0x33	; 51
 8c4:	84 60       	ori	r24, 0x04	; 4
 8c6:	83 bf       	out	0x33, r24	; 51
 8c8:	08 95       	ret
 8ca:	86 30       	cpi	r24, 0x06	; 6
 8cc:	51 f4       	brne	.+20     	; 0x8e2 <__stack+0x83>
 8ce:	83 b7       	in	r24, 0x33	; 51
 8d0:	8e 7f       	andi	r24, 0xFE	; 254
 8d2:	83 bf       	out	0x33, r24	; 51
 8d4:	83 b7       	in	r24, 0x33	; 51
 8d6:	82 60       	ori	r24, 0x02	; 2
 8d8:	83 bf       	out	0x33, r24	; 51
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	84 60       	ori	r24, 0x04	; 4
 8de:	83 bf       	out	0x33, r24	; 51
 8e0:	08 95       	ret
 8e2:	86 30       	cpi	r24, 0x06	; 6
 8e4:	49 f4       	brne	.+18     	; 0x8f8 <__stack+0x99>
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	83 b7       	in	r24, 0x33	; 51
 8ee:	82 60       	ori	r24, 0x02	; 2
 8f0:	83 bf       	out	0x33, r24	; 51
 8f2:	83 b7       	in	r24, 0x33	; 51
 8f4:	84 60       	ori	r24, 0x04	; 4
 8f6:	83 bf       	out	0x33, r24	; 51
 8f8:	08 95       	ret

000008fa <Timer0_Init>:
 8fa:	cf 93       	push	r28
 8fc:	c4 2f       	mov	r28, r20
 8fe:	93 b7       	in	r25, 0x33	; 51
 900:	9f 7b       	andi	r25, 0xBF	; 191
 902:	93 bf       	out	0x33, r25	; 51
 904:	93 b7       	in	r25, 0x33	; 51
 906:	97 7f       	andi	r25, 0xF7	; 247
 908:	93 bf       	out	0x33, r25	; 51
 90a:	62 bf       	out	0x32, r22	; 50
 90c:	0e 94 29 04 	call	0x852	; 0x852 <Timer0_Start>
 910:	c1 30       	cpi	r28, 0x01	; 1
 912:	21 f4       	brne	.+8      	; 0x91c <Timer0_Init+0x22>
 914:	89 b7       	in	r24, 0x39	; 57
 916:	81 60       	ori	r24, 0x01	; 1
 918:	89 bf       	out	0x39, r24	; 57
 91a:	05 c0       	rjmp	.+10     	; 0x926 <Timer0_Init+0x2c>
 91c:	c1 11       	cpse	r28, r1
 91e:	03 c0       	rjmp	.+6      	; 0x926 <Timer0_Init+0x2c>
 920:	89 b7       	in	r24, 0x39	; 57
 922:	8e 7f       	andi	r24, 0xFE	; 254
 924:	89 bf       	out	0x39, r24	; 57
 926:	cf 91       	pop	r28
 928:	08 95       	ret

0000092a <Timer0_Stop>:
 92a:	83 b7       	in	r24, 0x33	; 51
 92c:	8e 7f       	andi	r24, 0xFE	; 254
 92e:	83 bf       	out	0x33, r24	; 51
 930:	83 b7       	in	r24, 0x33	; 51
 932:	8d 7f       	andi	r24, 0xFD	; 253
 934:	83 bf       	out	0x33, r24	; 51
 936:	83 b7       	in	r24, 0x33	; 51
 938:	8b 7f       	andi	r24, 0xFB	; 251
 93a:	83 bf       	out	0x33, r24	; 51
 93c:	08 95       	ret

0000093e <__vector_11>:
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	4f 93       	push	r20
 94e:	5f 93       	push	r21
 950:	6f 93       	push	r22
 952:	7f 93       	push	r23
 954:	8f 93       	push	r24
 956:	9f 93       	push	r25
 958:	af 93       	push	r26
 95a:	bf 93       	push	r27
 95c:	ef 93       	push	r30
 95e:	ff 93       	push	r31
 960:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <ovfCounter.1665>
 964:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <ovfCounter.1665+0x1>
 968:	01 96       	adiw	r24, 0x01	; 1
 96a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <ovfCounter.1665+0x1>
 96e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <ovfCounter.1665>
 972:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Timer0_CallBack_Ptr>
 976:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Timer0_CallBack_Ptr+0x1>
 97a:	30 97       	sbiw	r30, 0x00	; 0
 97c:	41 f0       	breq	.+16     	; 0x98e <__vector_11+0x50>
 97e:	8a 36       	cpi	r24, 0x6A	; 106
 980:	98 41       	sbci	r25, 0x18	; 24
 982:	29 f4       	brne	.+10     	; 0x98e <__vector_11+0x50>
 984:	09 95       	icall
 986:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <ovfCounter.1665+0x1>
 98a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <ovfCounter.1665>
 98e:	ff 91       	pop	r31
 990:	ef 91       	pop	r30
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	7f 91       	pop	r23
 99c:	6f 91       	pop	r22
 99e:	5f 91       	pop	r21
 9a0:	4f 91       	pop	r20
 9a2:	3f 91       	pop	r19
 9a4:	2f 91       	pop	r18
 9a6:	0f 90       	pop	r0
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	0f 90       	pop	r0
 9ac:	1f 90       	pop	r1
 9ae:	18 95       	reti

000009b0 <Timer0_SetCallBack>:
 9b0:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Timer0_CallBack_Ptr+0x1>
 9b4:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Timer0_CallBack_Ptr>
 9b8:	08 95       	ret

000009ba <Timer2_Start>:
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	51 f4       	brne	.+20     	; 0x9d2 <Timer2_Start+0x18>
 9be:	85 b5       	in	r24, 0x25	; 37
 9c0:	81 60       	ori	r24, 0x01	; 1
 9c2:	85 bd       	out	0x25, r24	; 37
 9c4:	85 b5       	in	r24, 0x25	; 37
 9c6:	8d 7f       	andi	r24, 0xFD	; 253
 9c8:	85 bd       	out	0x25, r24	; 37
 9ca:	85 b5       	in	r24, 0x25	; 37
 9cc:	8b 7f       	andi	r24, 0xFB	; 251
 9ce:	85 bd       	out	0x25, r24	; 37
 9d0:	08 95       	ret
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	51 f4       	brne	.+20     	; 0x9ea <Timer2_Start+0x30>
 9d6:	85 b5       	in	r24, 0x25	; 37
 9d8:	8e 7f       	andi	r24, 0xFE	; 254
 9da:	85 bd       	out	0x25, r24	; 37
 9dc:	85 b5       	in	r24, 0x25	; 37
 9de:	82 60       	ori	r24, 0x02	; 2
 9e0:	85 bd       	out	0x25, r24	; 37
 9e2:	85 b5       	in	r24, 0x25	; 37
 9e4:	8b 7f       	andi	r24, 0xFB	; 251
 9e6:	85 bd       	out	0x25, r24	; 37
 9e8:	08 95       	ret
 9ea:	83 30       	cpi	r24, 0x03	; 3
 9ec:	51 f4       	brne	.+20     	; 0xa02 <Timer2_Start+0x48>
 9ee:	85 b5       	in	r24, 0x25	; 37
 9f0:	81 60       	ori	r24, 0x01	; 1
 9f2:	85 bd       	out	0x25, r24	; 37
 9f4:	85 b5       	in	r24, 0x25	; 37
 9f6:	82 60       	ori	r24, 0x02	; 2
 9f8:	85 bd       	out	0x25, r24	; 37
 9fa:	85 b5       	in	r24, 0x25	; 37
 9fc:	8b 7f       	andi	r24, 0xFB	; 251
 9fe:	85 bd       	out	0x25, r24	; 37
 a00:	08 95       	ret
 a02:	84 30       	cpi	r24, 0x04	; 4
 a04:	51 f4       	brne	.+20     	; 0xa1a <Timer2_Start+0x60>
 a06:	85 b5       	in	r24, 0x25	; 37
 a08:	8e 7f       	andi	r24, 0xFE	; 254
 a0a:	85 bd       	out	0x25, r24	; 37
 a0c:	85 b5       	in	r24, 0x25	; 37
 a0e:	8d 7f       	andi	r24, 0xFD	; 253
 a10:	85 bd       	out	0x25, r24	; 37
 a12:	85 b5       	in	r24, 0x25	; 37
 a14:	84 60       	ori	r24, 0x04	; 4
 a16:	85 bd       	out	0x25, r24	; 37
 a18:	08 95       	ret
 a1a:	85 30       	cpi	r24, 0x05	; 5
 a1c:	51 f4       	brne	.+20     	; 0xa32 <Timer2_Start+0x78>
 a1e:	85 b5       	in	r24, 0x25	; 37
 a20:	81 60       	ori	r24, 0x01	; 1
 a22:	85 bd       	out	0x25, r24	; 37
 a24:	85 b5       	in	r24, 0x25	; 37
 a26:	8d 7f       	andi	r24, 0xFD	; 253
 a28:	85 bd       	out	0x25, r24	; 37
 a2a:	85 b5       	in	r24, 0x25	; 37
 a2c:	84 60       	ori	r24, 0x04	; 4
 a2e:	85 bd       	out	0x25, r24	; 37
 a30:	08 95       	ret
 a32:	86 30       	cpi	r24, 0x06	; 6
 a34:	51 f4       	brne	.+20     	; 0xa4a <Timer2_Start+0x90>
 a36:	85 b5       	in	r24, 0x25	; 37
 a38:	8e 7f       	andi	r24, 0xFE	; 254
 a3a:	85 bd       	out	0x25, r24	; 37
 a3c:	85 b5       	in	r24, 0x25	; 37
 a3e:	82 60       	ori	r24, 0x02	; 2
 a40:	85 bd       	out	0x25, r24	; 37
 a42:	85 b5       	in	r24, 0x25	; 37
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	85 bd       	out	0x25, r24	; 37
 a48:	08 95       	ret
 a4a:	86 30       	cpi	r24, 0x06	; 6
 a4c:	49 f4       	brne	.+18     	; 0xa60 <Timer2_Start+0xa6>
 a4e:	85 b5       	in	r24, 0x25	; 37
 a50:	81 60       	ori	r24, 0x01	; 1
 a52:	85 bd       	out	0x25, r24	; 37
 a54:	85 b5       	in	r24, 0x25	; 37
 a56:	82 60       	ori	r24, 0x02	; 2
 a58:	85 bd       	out	0x25, r24	; 37
 a5a:	85 b5       	in	r24, 0x25	; 37
 a5c:	84 60       	ori	r24, 0x04	; 4
 a5e:	85 bd       	out	0x25, r24	; 37
 a60:	08 95       	ret

00000a62 <Timer2_Init>:
 a62:	cf 93       	push	r28
 a64:	c4 2f       	mov	r28, r20
 a66:	95 b5       	in	r25, 0x25	; 37
 a68:	97 7f       	andi	r25, 0xF7	; 247
 a6a:	95 bd       	out	0x25, r25	; 37
 a6c:	95 b5       	in	r25, 0x25	; 37
 a6e:	9f 7b       	andi	r25, 0xBF	; 191
 a70:	95 bd       	out	0x25, r25	; 37
 a72:	64 bd       	out	0x24, r22	; 36
 a74:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Timer2_Start>
 a78:	c1 30       	cpi	r28, 0x01	; 1
 a7a:	21 f4       	brne	.+8      	; 0xa84 <Timer2_Init+0x22>
 a7c:	89 b7       	in	r24, 0x39	; 57
 a7e:	80 64       	ori	r24, 0x40	; 64
 a80:	89 bf       	out	0x39, r24	; 57
 a82:	05 c0       	rjmp	.+10     	; 0xa8e <Timer2_Init+0x2c>
 a84:	c1 11       	cpse	r28, r1
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <Timer2_Init+0x2c>
 a88:	89 b7       	in	r24, 0x39	; 57
 a8a:	8f 7b       	andi	r24, 0xBF	; 191
 a8c:	89 bf       	out	0x39, r24	; 57
 a8e:	cf 91       	pop	r28
 a90:	08 95       	ret

00000a92 <Timer2_Stop>:
 a92:	85 b5       	in	r24, 0x25	; 37
 a94:	8e 7f       	andi	r24, 0xFE	; 254
 a96:	85 bd       	out	0x25, r24	; 37
 a98:	85 b5       	in	r24, 0x25	; 37
 a9a:	8d 7f       	andi	r24, 0xFD	; 253
 a9c:	85 bd       	out	0x25, r24	; 37
 a9e:	85 b5       	in	r24, 0x25	; 37
 aa0:	8b 7f       	andi	r24, 0xFB	; 251
 aa2:	85 bd       	out	0x25, r24	; 37
 aa4:	08 95       	ret

00000aa6 <__vector_5>:
 aa6:	1f 92       	push	r1
 aa8:	0f 92       	push	r0
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	0f 92       	push	r0
 aae:	11 24       	eor	r1, r1
 ab0:	2f 93       	push	r18
 ab2:	3f 93       	push	r19
 ab4:	4f 93       	push	r20
 ab6:	5f 93       	push	r21
 ab8:	6f 93       	push	r22
 aba:	7f 93       	push	r23
 abc:	8f 93       	push	r24
 abe:	9f 93       	push	r25
 ac0:	af 93       	push	r26
 ac2:	bf 93       	push	r27
 ac4:	ef 93       	push	r30
 ac6:	ff 93       	push	r31
 ac8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <ovfCounter.1696>
 acc:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <ovfCounter.1696+0x1>
 ad0:	01 96       	adiw	r24, 0x01	; 1
 ad2:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <ovfCounter.1696+0x1>
 ad6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <ovfCounter.1696>
 ada:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <Timer2_CallBack_Ptr>
 ade:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <Timer2_CallBack_Ptr+0x1>
 ae2:	30 97       	sbiw	r30, 0x00	; 0
 ae4:	41 f0       	breq	.+16     	; 0xaf6 <__vector_5+0x50>
 ae6:	84 32       	cpi	r24, 0x24	; 36
 ae8:	94 4f       	sbci	r25, 0xF4	; 244
 aea:	29 f4       	brne	.+10     	; 0xaf6 <__vector_5+0x50>
 aec:	09 95       	icall
 aee:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <ovfCounter.1696+0x1>
 af2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <ovfCounter.1696>
 af6:	ff 91       	pop	r31
 af8:	ef 91       	pop	r30
 afa:	bf 91       	pop	r27
 afc:	af 91       	pop	r26
 afe:	9f 91       	pop	r25
 b00:	8f 91       	pop	r24
 b02:	7f 91       	pop	r23
 b04:	6f 91       	pop	r22
 b06:	5f 91       	pop	r21
 b08:	4f 91       	pop	r20
 b0a:	3f 91       	pop	r19
 b0c:	2f 91       	pop	r18
 b0e:	0f 90       	pop	r0
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	0f 90       	pop	r0
 b14:	1f 90       	pop	r1
 b16:	18 95       	reti

00000b18 <Timer2_SetCallBack>:



void Timer2_SetCallBack ( void(*Ptr2Func)(void) )
{
	Timer2_CallBack_Ptr = Ptr2Func;
 b18:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <Timer2_CallBack_Ptr+0x1>
 b1c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Timer2_CallBack_Ptr>
 b20:	08 95       	ret

00000b22 <Read_WaterTemperature>:
	uint8 Temp_firstDigit=0, Temp_secondDigit=0;
	static uint8 prevTemp = 0;
	static uint16 Temp_Sum = 0;
	static uint8 TempReadings_Counter = 0;
	
	TempReadings_Counter++;
 b22:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TempReadings_Counter.1977>
 b26:	8f 5f       	subi	r24, 0xFF	; 255
 b28:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <TempReadings_Counter.1977>
	
	
	Temperature = LM35_Read(TEMP_CHANNEL);
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LM35_Read>
 b32:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Temperature>
	/* Check to display temperature to avoid many writings and blinkings on SSD */
	if( (Temperature != prevTemp && WaterHeater_mode == DEFAULT_MODE) || TempDisplay_Flag == TRUE)
 b36:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <Temperature>
 b3a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <prevTemp.1975>
 b3e:	98 17       	cp	r25, r24
 b40:	21 f0       	breq	.+8      	; 0xb4a <Read_WaterTemperature+0x28>
 b42:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <WaterHeater_mode>
 b46:	88 23       	and	r24, r24
 b48:	21 f0       	breq	.+8      	; 0xb52 <Read_WaterTemperature+0x30>
 b4a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <TempDisplay_Flag>
 b4e:	81 30       	cpi	r24, 0x01	; 1
 b50:	e1 f4       	brne	.+56     	; 0xb8a <Read_WaterTemperature+0x68>
	{
		/* SSD Display */
		Temp_secondDigit = Temperature % 10;
 b52:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Temperature>
 b56:	2d ec       	ldi	r18, 0xCD	; 205
 b58:	82 9f       	mul	r24, r18
 b5a:	61 2d       	mov	r22, r1
 b5c:	11 24       	eor	r1, r1
 b5e:	66 95       	lsr	r22
 b60:	66 95       	lsr	r22
 b62:	66 95       	lsr	r22
 b64:	66 0f       	add	r22, r22
 b66:	96 2f       	mov	r25, r22
 b68:	99 0f       	add	r25, r25
 b6a:	99 0f       	add	r25, r25
 b6c:	69 0f       	add	r22, r25
 b6e:	86 1b       	sub	r24, r22
 b70:	68 2f       	mov	r22, r24
		Temp_firstDigit = Temperature / 10;
 b72:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Temperature>
 b76:	82 9f       	mul	r24, r18
 b78:	81 2d       	mov	r24, r1
 b7a:	11 24       	eor	r1, r1
		SSD_WriteNum(Temp_firstDigit, Temp_secondDigit);
 b7c:	86 95       	lsr	r24
 b7e:	86 95       	lsr	r24
 b80:	86 95       	lsr	r24
 b82:	0e 94 b0 03 	call	0x760	; 0x760 <SSD_WriteNum>
		
		TempDisplay_Flag = FALSE;
 b86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <TempDisplay_Flag>
	}
	prevTemp = Temperature;
 b8a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Temperature>
 b8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <prevTemp.1975>
	
	
	Temp_Sum += Temperature;
 b92:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Temperature>
 b96:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <Temp_Sum.1976>
 b9a:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <Temp_Sum.1976+0x1>
 b9e:	28 0f       	add	r18, r24
 ba0:	31 1d       	adc	r19, r1
 ba2:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <Temp_Sum.1976+0x1>
 ba6:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <Temp_Sum.1976>
	if( TempReadings_Counter == TEMP_READCOUNT )
 baa:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <TempReadings_Counter.1977>
 bae:	8a 30       	cpi	r24, 0x0A	; 10
 bb0:	91 f4       	brne	.+36     	; 0xbd6 <Read_WaterTemperature+0xb4>
	{
		TempReadings_Avg = Temp_Sum / TEMP_READCOUNT;
 bb2:	ad ec       	ldi	r26, 0xCD	; 205
 bb4:	bc ec       	ldi	r27, 0xCC	; 204
 bb6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__umulhisi3>
 bba:	96 95       	lsr	r25
 bbc:	87 95       	ror	r24
 bbe:	96 95       	lsr	r25
 bc0:	87 95       	ror	r24
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <TempReadings_Avg>
		TempReadings_Counter = 0;
 bca:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <TempReadings_Counter.1977>
		Temp_Sum = 0;
 bce:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <Temp_Sum.1976+0x1>
 bd2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <Temp_Sum.1976>
 bd6:	08 95       	ret

00000bd8 <Blink_SetPointTemperature_and_HeaterLED>:
void Blink_SetPointTemperature_and_HeaterLED(void)
{
	
	uint8 Setpoint_firstDigit=0, Setpoint_secondDigit=0;

	if( LED_Blink_Flag == TRUE )
 bd8:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <LED_Blink_Flag>
 bdc:	81 30       	cpi	r24, 0x01	; 1
 bde:	21 f4       	brne	.+8      	; 0xbe8 <Blink_SetPointTemperature_and_HeaterLED+0x10>
	{
		Flip_LED(Heater_LED);
 be0:	87 e1       	ldi	r24, 0x17	; 23
 be2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Flip_LED>
 be6:	08 95       	ret
	}
	else if( SSD_Blink_Flag == TRUE )
 be8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <SSD_Blink_Flag>
 bec:	81 30       	cpi	r24, 0x01	; 1
 bee:	51 f5       	brne	.+84     	; 0xc44 <Blink_SetPointTemperature_and_HeaterLED+0x6c>
	{
		ButtonsReleased_Counter++;
 bf0:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <ButtonsReleased_Counter>
 bf4:	8f 5f       	subi	r24, 0xFF	; 255
 bf6:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <ButtonsReleased_Counter>
		
		if( Display_Flag == TRUE )
 bfa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Display_Flag>
 bfe:	81 30       	cpi	r24, 0x01	; 1
 c00:	c9 f4       	brne	.+50     	; 0xc34 <Blink_SetPointTemperature_and_HeaterLED+0x5c>
		{
			/* SSD Display */
			Setpoint_secondDigit = Setpoint % 10;
 c02:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <Setpoint>
 c06:	8d ec       	ldi	r24, 0xCD	; 205
 c08:	28 9f       	mul	r18, r24
 c0a:	81 2d       	mov	r24, r1
 c0c:	11 24       	eor	r1, r1
 c0e:	68 2f       	mov	r22, r24
 c10:	66 95       	lsr	r22
 c12:	66 95       	lsr	r22
 c14:	66 95       	lsr	r22
 c16:	66 0f       	add	r22, r22
 c18:	96 2f       	mov	r25, r22
 c1a:	99 0f       	add	r25, r25
 c1c:	99 0f       	add	r25, r25
 c1e:	69 0f       	add	r22, r25
 c20:	26 1b       	sub	r18, r22
 c22:	62 2f       	mov	r22, r18
			Setpoint_firstDigit = Setpoint / 10;
			SSD_WriteNum(Setpoint_firstDigit, Setpoint_secondDigit);
 c24:	86 95       	lsr	r24
 c26:	86 95       	lsr	r24
 c28:	86 95       	lsr	r24
 c2a:	0e 94 b0 03 	call	0x760	; 0x760 <SSD_WriteNum>

			Display_Flag = FALSE;
 c2e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <Display_Flag>
 c32:	08 95       	ret
		}
		else if( Display_Flag == FALSE )
 c34:	81 11       	cpse	r24, r1
 c36:	06 c0       	rjmp	.+12     	; 0xc44 <Blink_SetPointTemperature_and_HeaterLED+0x6c>
		{
			SSD_WriteNum(0,0);
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	0e 94 b0 03 	call	0x760	; 0x760 <SSD_WriteNum>
			Display_Flag = TRUE;
 c3e:	81 e0       	ldi	r24, 0x01	; 1
 c40:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <Display_Flag>
 c44:	08 95       	ret

00000c46 <WaterHeater_Control_Init>:
static boolean Display_Flag = TRUE;


void WaterHeater_Control_Init(void)
{
	WaterHeater_mode = DEFAULT_MODE;
 c46:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <WaterHeater_mode>
	Setpoint = 60;
 c4a:	8c e3       	ldi	r24, 0x3C	; 60
 c4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <Setpoint>
	
	DIO_Init();
 c50:	0e 94 33 02 	call	0x466	; 0x466 <DIO_Init>
	Button_Init();
 c54:	0e 94 70 00 	call	0xe0	; 0xe0 <Button_Init>
	LED_Init();
 c58:	0e 94 4e 03 	call	0x69c	; 0x69c <LED_Init>
	SSD_Init();
 c5c:	0e 94 a7 03 	call	0x74e	; 0x74e <SSD_Init>
	Relay_Init();
 c60:	0e 94 8e 03 	call	0x71c	; 0x71c <Relay_Init>
	LM35_Init();
 c64:	0e 94 66 03 	call	0x6cc	; 0x6cc <LM35_Init>
	Heater_Init();
 c68:	0e 94 8c 00 	call	0x118	; 0x118 <Heater_Init>
	Peltier_Init();
 c6c:	0e 94 86 03 	call	0x70c	; 0x70c <Peltier_Init>
	GINT_Enable_AllInterrupts();
 c70:	0e 94 4a 03 	call	0x694	; 0x694 <GINT_Enable_AllInterrupts>
	Timer0_SetCallBack(Read_WaterTemperature);
 c74:	81 e9       	ldi	r24, 0x91	; 145
 c76:	95 e0       	ldi	r25, 0x05	; 5
 c78:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Timer0_SetCallBack>
	Timer2_SetCallBack(Blink_SetPointTemperature_and_HeaterLED);
 c7c:	8c ee       	ldi	r24, 0xEC	; 236
 c7e:	95 e0       	ldi	r25, 0x05	; 5
 c80:	0e 94 8c 05 	call	0xb18	; 0xb18 <Timer2_SetCallBack>
	Timer0_Init(NoClkSrc,0,TRUE);
 c84:	41 e0       	ldi	r20, 0x01	; 1
 c86:	60 e0       	ldi	r22, 0x00	; 0
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Timer0_Init>
	Timer2_Init(NoClkSrc,0,TRUE);
 c8e:	41 e0       	ldi	r20, 0x01	; 1
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	0e 94 31 05 	call	0xa62	; 0xa62 <Timer2_Init>
	
	
	if(EEPROM_read(EEPROM_SP_Address) != 255)
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <EEPROM_read>
 ca0:	8f 3f       	cpi	r24, 0xFF	; 255
 ca2:	31 f0       	breq	.+12     	; 0xcb0 <WaterHeater_Control_Init+0x6a>
	{
		Setpoint = EEPROM_read(EEPROM_SP_Address);
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <EEPROM_read>
 cac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <Setpoint>
 cb0:	08 95       	ret

00000cb2 <WaterHeater_Control>:
	}
}

void WaterHeater_Control(void)
{
 cb2:	cf 93       	push	r28
	static boolean ButtonDebouncing_Flag = FALSE;
	
	
	switch(WaterHeater_mode)
 cb4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <WaterHeater_mode>
 cb8:	88 23       	and	r24, r24
 cba:	21 f0       	breq	.+8      	; 0xcc4 <WaterHeater_Control+0x12>
 cbc:	81 30       	cpi	r24, 0x01	; 1
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <WaterHeater_Control+0x10>
 cc0:	60 c0       	rjmp	.+192    	; 0xd82 <WaterHeater_Control+0xd0>
 cc2:	bf c0       	rjmp	.+382    	; 0xe42 <WaterHeater_Control+0x190>
	{
		case(DEFAULT_MODE):
		{
		

			if( (Setpoint - TempReadings_Avg) == TEMP_CMP_NUM)
 cc4:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <Setpoint>
 cc8:	30 e0       	ldi	r19, 0x00	; 0
 cca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <TempReadings_Avg>
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	a9 01       	movw	r20, r18
 cd2:	48 1b       	sub	r20, r24
 cd4:	59 0b       	sbc	r21, r25
 cd6:	45 30       	cpi	r20, 0x05	; 5
 cd8:	51 05       	cpc	r21, r1
 cda:	91 f4       	brne	.+36     	; 0xd00 <WaterHeater_Control+0x4e>
			{
				Heater_SetMode(HEATER_ON_MODE);
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	0e 94 80 00 	call	0x100	; 0x100 <Heater_SetMode>
				Peltier_SetMode(PELTIER_OFF_MODE);
 ce2:	80 e0       	ldi	r24, 0x00	; 0
 ce4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Peltier_SetMode>
				
				if(StartLEDTimer_Flag == TRUE)
 ce8:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <StartLEDTimer_Flag>
 cec:	81 30       	cpi	r24, 0x01	; 1
 cee:	69 f5       	brne	.+90     	; 0xd4a <WaterHeater_Control+0x98>
				{
					Timer2_Start(No_Prescaler);
 cf0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Timer2_Start>
					
					StartLEDTimer_Flag = FALSE;
 cf4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <StartLEDTimer_Flag>
					LED_Blink_Flag = TRUE;
 cf8:	81 e0       	ldi	r24, 0x01	; 1
 cfa:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <LED_Blink_Flag>
 cfe:	25 c0       	rjmp	.+74     	; 0xd4a <WaterHeater_Control+0x98>
				}
				else {}
			}
			else if( (TempReadings_Avg - Setpoint) == TEMP_CMP_NUM)
 d00:	82 1b       	sub	r24, r18
 d02:	93 0b       	sbc	r25, r19
 d04:	05 97       	sbiw	r24, 0x05	; 5
 d06:	89 f4       	brne	.+34     	; 0xd2a <WaterHeater_Control+0x78>
			{
				Heater_SetMode(HEATER_OFF_MODE);
 d08:	80 e0       	ldi	r24, 0x00	; 0
 d0a:	0e 94 80 00 	call	0x100	; 0x100 <Heater_SetMode>
				Peltier_SetMode(PELTIER_ON_MODE);
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Peltier_SetMode>
				
				Timer2_Stop();
 d14:	0e 94 49 05 	call	0xa92	; 0xa92 <Timer2_Stop>
				LED_Blink_Flag = FALSE;
 d18:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <LED_Blink_Flag>
				StartLEDTimer_Flag = TRUE;
 d1c:	81 e0       	ldi	r24, 0x01	; 1
 d1e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <StartLEDTimer_Flag>
				SetLED_ON(Heater_LED);
 d22:	87 e1       	ldi	r24, 0x17	; 23
 d24:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <SetLED_ON>
 d28:	10 c0       	rjmp	.+32     	; 0xd4a <WaterHeater_Control+0x98>
			}
			else
			{
				Timer2_Stop();
 d2a:	0e 94 49 05 	call	0xa92	; 0xa92 <Timer2_Stop>
				LED_Blink_Flag = FALSE;
 d2e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <LED_Blink_Flag>
				StartLEDTimer_Flag = TRUE;
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <StartLEDTimer_Flag>
				Heater_SetMode(HEATER_OFF_MODE);
 d38:	80 e0       	ldi	r24, 0x00	; 0
 d3a:	0e 94 80 00 	call	0x100	; 0x100 <Heater_SetMode>
				Peltier_SetMode(PELTIER_OFF_MODE);
 d3e:	80 e0       	ldi	r24, 0x00	; 0
 d40:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Peltier_SetMode>
				SetLED_OFF(Heater_LED);
 d44:	87 e1       	ldi	r24, 0x17	; 23
 d46:	0e 94 5f 03 	call	0x6be	; 0x6be <SetLED_OFF>
			}
			
			
			
			
			if( Button_getState(UP_Button) == BUTTON_PRESSED || Button_getState(DOWN_Button) == BUTTON_PRESSED )
 d4a:	88 e0       	ldi	r24, 0x08	; 8
 d4c:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 d50:	81 30       	cpi	r24, 0x01	; 1
 d52:	31 f0       	breq	.+12     	; 0xd60 <WaterHeater_Control+0xae>
 d54:	8e e1       	ldi	r24, 0x1E	; 30
 d56:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 d5a:	81 30       	cpi	r24, 0x01	; 1
 d5c:	09 f0       	breq	.+2      	; 0xd60 <WaterHeater_Control+0xae>
 d5e:	71 c0       	rjmp	.+226    	; 0xe42 <WaterHeater_Control+0x190>
			{
				Timer2_Stop();
 d60:	0e 94 49 05 	call	0xa92	; 0xa92 <Timer2_Stop>
				LED_Blink_Flag = FALSE;
 d64:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <LED_Blink_Flag>
				StartLEDTimer_Flag = TRUE;
 d68:	c1 e0       	ldi	r28, 0x01	; 1
 d6a:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <StartLEDTimer_Flag>
				SetLED_OFF(Heater_LED);
 d6e:	87 e1       	ldi	r24, 0x17	; 23
 d70:	0e 94 5f 03 	call	0x6be	; 0x6be <SetLED_OFF>
				
				WaterHeater_mode = TEMPERATURE_SETTING_MODE;
 d74:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <WaterHeater_mode>
				StartSSDTimer_Flag = TRUE;
 d78:	c0 93 b6 00 	sts	0x00B6, r28	; 0x8000b6 <StartSSDTimer_Flag>
				ButtonDebouncing_Flag = TRUE;
 d7c:	c0 93 b2 00 	sts	0x00B2, r28	; 0x8000b2 <ButtonDebouncing_Flag.1962>
 d80:	60 c0       	rjmp	.+192    	; 0xe42 <WaterHeater_Control+0x190>
			break;
		}
		
		case(TEMPERATURE_SETTING_MODE):
		{
			if(StartSSDTimer_Flag == TRUE)
 d82:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <StartSSDTimer_Flag>
 d86:	81 30       	cpi	r24, 0x01	; 1
 d88:	39 f4       	brne	.+14     	; 0xd98 <WaterHeater_Control+0xe6>
			{
				Timer2_Start(No_Prescaler);
 d8a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Timer2_Start>
				
				SSD_Blink_Flag = TRUE;
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <SSD_Blink_Flag>
				StartSSDTimer_Flag = FALSE;
 d94:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <StartSSDTimer_Flag>
			}
			else {}
						
			
			if(ButtonDebouncing_Flag == TRUE)
 d98:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <ButtonDebouncing_Flag.1962>
 d9c:	81 30       	cpi	r24, 0x01	; 1
 d9e:	61 f4       	brne	.+24     	; 0xdb8 <WaterHeater_Control+0x106>
			{
				while( Button_getState(UP_Button) == BUTTON_PRESSED || Button_getState(DOWN_Button) == BUTTON_PRESSED );
 da0:	88 e0       	ldi	r24, 0x08	; 8
 da2:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 da6:	81 30       	cpi	r24, 0x01	; 1
 da8:	d9 f3       	breq	.-10     	; 0xda0 <WaterHeater_Control+0xee>
 daa:	8e e1       	ldi	r24, 0x1E	; 30
 dac:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 db0:	81 30       	cpi	r24, 0x01	; 1
 db2:	b1 f3       	breq	.-20     	; 0xda0 <WaterHeater_Control+0xee>
				ButtonDebouncing_Flag = FALSE;
 db4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <ButtonDebouncing_Flag.1962>
			}
						
			
			if( Button_getState(UP_Button) == BUTTON_PRESSED && Setpoint < 75 )
 db8:	88 e0       	ldi	r24, 0x08	; 8
 dba:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 dbe:	81 30       	cpi	r24, 0x01	; 1
 dc0:	89 f4       	brne	.+34     	; 0xde4 <WaterHeater_Control+0x132>
 dc2:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <Setpoint>
 dc6:	6b 34       	cpi	r22, 0x4B	; 75
 dc8:	68 f4       	brcc	.+26     	; 0xde4 <WaterHeater_Control+0x132>
			{
				Setpoint += TEMP_SETPOINT_OFFSET;
 dca:	6b 5f       	subi	r22, 0xFB	; 251
 dcc:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <Setpoint>
				EEPROM_write(EEPROM_SP_Address, Setpoint);
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EEPROM_write>
				
				ButtonDebouncing_Flag = TRUE;
 dd8:	81 e0       	ldi	r24, 0x01	; 1
 dda:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <ButtonDebouncing_Flag.1962>
				ButtonsReleased_Counter = 0;
 dde:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <ButtonsReleased_Counter>
 de2:	2f c0       	rjmp	.+94     	; 0xe42 <WaterHeater_Control+0x190>
			}
			else if( Button_getState(DOWN_Button) == BUTTON_PRESSED && Setpoint > 35 )
 de4:	8e e1       	ldi	r24, 0x1E	; 30
 de6:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 dea:	81 30       	cpi	r24, 0x01	; 1
 dec:	89 f4       	brne	.+34     	; 0xe10 <WaterHeater_Control+0x15e>
 dee:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <Setpoint>
 df2:	64 32       	cpi	r22, 0x24	; 36
 df4:	68 f0       	brcs	.+26     	; 0xe10 <WaterHeater_Control+0x15e>
			{
				Setpoint -= TEMP_SETPOINT_OFFSET;
 df6:	65 50       	subi	r22, 0x05	; 5
 df8:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <Setpoint>
				EEPROM_write(EEPROM_SP_Address, Setpoint);
 dfc:	80 e0       	ldi	r24, 0x00	; 0
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EEPROM_write>
				
				ButtonDebouncing_Flag = TRUE;
 e04:	81 e0       	ldi	r24, 0x01	; 1
 e06:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <ButtonDebouncing_Flag.1962>
				ButtonsReleased_Counter = 0;
 e0a:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <ButtonsReleased_Counter>
 e0e:	19 c0       	rjmp	.+50     	; 0xe42 <WaterHeater_Control+0x190>
			}
			else if( Button_getState(UP_Button) == BUTTON_RELEASED && Button_getState(DOWN_Button) == BUTTON_RELEASED )
 e10:	88 e0       	ldi	r24, 0x08	; 8
 e12:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 e16:	81 11       	cpse	r24, r1
 e18:	14 c0       	rjmp	.+40     	; 0xe42 <WaterHeater_Control+0x190>
 e1a:	8e e1       	ldi	r24, 0x1E	; 30
 e1c:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_getState>
 e20:	81 11       	cpse	r24, r1
 e22:	0f c0       	rjmp	.+30     	; 0xe42 <WaterHeater_Control+0x190>
			{
				if( ButtonsReleased_Counter == 5)
 e24:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <ButtonsReleased_Counter>
 e28:	85 30       	cpi	r24, 0x05	; 5
 e2a:	59 f4       	brne	.+22     	; 0xe42 <WaterHeater_Control+0x190>
				{
					Timer2_Stop();
 e2c:	0e 94 49 05 	call	0xa92	; 0xa92 <Timer2_Stop>
					WaterHeater_mode = DEFAULT_MODE;
 e30:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <WaterHeater_mode>
					
					SSD_Blink_Flag = FALSE;
 e34:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <SSD_Blink_Flag>
					ButtonsReleased_Counter = 0;
 e38:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <ButtonsReleased_Counter>
					TempDisplay_Flag = TRUE;
 e3c:	81 e0       	ldi	r24, 0x01	; 1
 e3e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <TempDisplay_Flag>
		
		default: {}
	}
	
	
}
 e42:	cf 91       	pop	r28
 e44:	08 95       	ret

00000e46 <Stop_WaterHeater_Operation>:



void Stop_WaterHeater_Operation(void)
{
	Timer0_Stop();
 e46:	0e 94 95 04 	call	0x92a	; 0x92a <Timer0_Stop>
	Timer2_Stop();
 e4a:	0e 94 49 05 	call	0xa92	; 0xa92 <Timer2_Stop>
	StartSSDTimer_Flag = TRUE;
 e4e:	81 e0       	ldi	r24, 0x01	; 1
 e50:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <StartSSDTimer_Flag>
	StartLEDTimer_Flag = TRUE;
 e54:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <StartLEDTimer_Flag>
 e58:	08 95       	ret

00000e5a <__umulhisi3>:
 e5a:	a2 9f       	mul	r26, r18
 e5c:	b0 01       	movw	r22, r0
 e5e:	b3 9f       	mul	r27, r19
 e60:	c0 01       	movw	r24, r0
 e62:	a3 9f       	mul	r26, r19
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	b2 9f       	mul	r27, r18
 e6e:	70 0d       	add	r23, r0
 e70:	81 1d       	adc	r24, r1
 e72:	11 24       	eor	r1, r1
 e74:	91 1d       	adc	r25, r1
 e76:	08 95       	ret

00000e78 <_exit>:
 e78:	f8 94       	cli

00000e7a <__stop_program>:
 e7a:	ff cf       	rjmp	.-2      	; 0xe7a <__stop_program>
